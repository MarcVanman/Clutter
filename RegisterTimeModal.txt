import { useState, useRef, useEffect } from 'react';
import useMachineContext from '../hooks/use-machine-context';
import useListenForButtonPress from '../reusable_functions/listenForButtonPress';
import dayjs from 'dayjs';
import { v4 as uuidv4 } from 'uuid';
import 'dayjs/locale/da';
import { utcToZonedTime } from 'date-fns-tz';
import Stack from '@mui/material/Stack';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { TimeField } from '@mui/x-date-pickers/TimeField';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { TextInput, DropdownItem, Dropdown } from "@tremor/react";
import { SelectBox, SelectBoxItem } from "@tremor/react";
import { Card, Text, Col } from "@tremor/react";
import { Button } from "@tremor/react";
import AddCircleIcon from '@mui/icons-material/AddCircle';
import SuccessModal from './SuccessModal';
import ErrorModal from './ErrorModal';


// Add handling of several stop sections
const today = new Date();  // get today's date
const createdDaysAgo = 60;  // calculate date 60 days ago

function getCopenhagenDate(date) {
  const copenhagenTimeZone = 'Europe/Copenhagen';
  const copenhagenDate = utcToZonedTime(date, copenhagenTimeZone);
  return copenhagenDate;
}

const filterByCreationDate = (returnedPOrders, createdDaysAgo) => {
  return returnedPOrders.filter(order => {
    const creationDate = new Date(order.CreationDate);
    const differenceInTime = today - creationDate;
    const differenceInDays = differenceInTime / (1000 * 3600 * 24);
    return differenceInDays <= createdDaysAgo;
  });
};

function useScrollToAddButton(ref, callback, scrollToAddStop) {
  useEffect(() => {
    if (scrollToAddStop) {
      ref.current.scrollIntoView({ behavior: 'smooth' });
      if (typeof callback === 'function') {
        callback();
      }
    }
  }, [ref, callback, scrollToAddStop]);
}

function RegisterTimeModal() {
  const contentRef = useRef();


  const now = new Date()
  const formattedDateNow = now.toISOString().slice(0, 10);
  const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
  const formattedDateTimeOneHourAgo = oneHourAgo.toISOString().slice(0, 16);

  const { showRegisterTimeModal, handleRegisterTimeClose, selectedMachine, pOrders, setPOrders, postItem, getAllItems } = useMachineContext();
  const [selectedPOrder, setSelectedPOrder] = useState(null);
  const [shift, setShift] = useState('');

  const [discarded, setDiscarded] = useState('');
  const [produced, setProduced] = useState('');
  const [productionTimeStart, setProductionTimeStart] = useState(dayjs(getCopenhagenDate(new Date().setHours(6, 45, 0, 0))));
  const [productionTimeEnd, setProductionTimeEnd] = useState(dayjs(getCopenhagenDate(new Date().setHours(15, 0, 0, 0))));
  const [dateSelected, setDateSelected] = useState(dayjs(formattedDateNow));
  const [isDiscardedValid, setIsDiscardedValid] = useState(null);
  const [isProducedValid, setIsProducedValid] = useState(null);
  const [hasDiscardedInteracted, setHasDiscardedInteracted] = useState(false);
  const [hasProducedInteracted, setHasProducedInteracted] = useState(false);
  const [stops, setStops] = useState([]);
  const [scrollToAddStop, setScrollToAddStop] = useState(false);
  const [isPOrderChosen, setIsPOrderChosen] = useState(false);
  const [isShiftChosen, setIsShiftChosen] = useState(false);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [showErrorModal, setShowErrorModal] = useState(false);
  const [localTimeValues, setLocalTimeValues] = useState({});


  useEffect(() => {
    const fetchData = async () => {
      const responseData = await getAllItems({
        all: true,
        table: 'OEE-P-Orders'
      });
      console.log('fetching pOrders', responseData);
      const filteredPOrders = filterByCreationDate(responseData, createdDaysAgo);
      filteredPOrders.sort((a, b) => a.CreationDate < b.CreationDate ? 1 : (a.CreationDate > b.CreationDate ? -1 : 0));

      console.log('P-Orders after date filtering', filteredPOrders)
      setPOrders(filteredPOrders);
    };
    fetchData();
  }, [getAllItems, setPOrders]);

  const inputIsGiven = (value, setter) => {
    if (value) {
      setter(true);
    } else {
      setter(false);
    }
  };

  const refAddStopButton = useRef(null);
  useScrollToAddButton(refAddStopButton, () => setScrollToAddStop(false), scrollToAddStop);

  const addStop = () => {
    const newStop = {
      id: stops.length,
      stopReason: "",
      startTime: dayjs(formattedDateTimeOneHourAgo),
      endTime: dayjs(formattedDateTimeOneHourAgo),
    };

    setStops([...stops, newStop]);
    setScrollToAddStop(true);
  };

  const clearInputs = () => {
    setDiscarded('');
    setProduced('');
    setSelectedPOrder('');
    setShift('');
    setStops([]);
    setIsPOrderChosen(false);
    setIsShiftChosen(false);
    setHasDiscardedInteracted(false);
    setHasProducedInteracted(false);
    setIsDiscardedValid(null);
    setIsProducedValid(null);
    setDateSelected(dayjs(formattedDateNow));
  };

  const handleModalClose = () => {
    handleRegisterTimeClose();
    clearInputs();
    setShowSuccessModal(false);
  };

  const scrollToTop = () => {
    if (contentRef && contentRef.current) {
      contentRef.current.scrollTop = 0;
      contentRef.current.classList.add('no-scroll');
    }
  };


  const handleSuccessModalClose = () => {
    handleModalClose();
  };

  const handleErrorModalClose = () => {
    setStops([]);
    setShowErrorModal(false);
    contentRef.current.classList.remove('no-scroll');
  };

  useListenForButtonPress(27, handleModalClose, showRegisterTimeModal);

  const handleCancelClick = (e) => {
    e.preventDefault();
    handleModalClose();
  };

  const validateNumberInput = (stateVariable, setFunction, setFunctionInteracted) => {
    setFunctionInteracted(true);
    const numberPattern = /^\d{1,4}$/;
    setFunction(numberPattern.test(stateVariable));
  };

  const handleDiscardedChange = (e) => {
    setDiscarded(e.target.value);
    setHasDiscardedInteracted(false)
  };

  const handleProducedChange = (e) => {
    setProduced(e.target.value);
    setHasProducedInteracted(false)
  };

  const handleProductionTimeChange = (value, timeKey) => {
    if (timeKey === 'productionTimeStart') {
      setProductionTimeStart(value);
    } else {
      setProductionTimeEnd(value);
    }
  };

  const handleStopTimeChange = (value, index, timeKey) => {
    if (!value) { // If the value is empty
      const updatedStops = [...stops];
      updatedStops[index] = {
        ...updatedStops[index],
        [timeKey]: null,  // Set the time field to null
      };
      setStops(updatedStops);
      return;
    }
    // If the value is not empty, keep the local time values
    setLocalTimeValues((prevState) => ({
      ...prevState,
      [`${index}_${timeKey}`]: value,
    }));
  };

  const handleTimeBlur = (index, timeKey) => {
    const value = localTimeValues[`${index}_${timeKey}`];

    const updatedTime = dayjs(value, 'HH:mm');
    if (!updatedTime.isValid()) { // If the updatedTime is invalid, we just return to avoid any calculations
      return;
    }

    const updatedStops = [...stops];
    let newTime = dayjs(stops[index]?.[timeKey]);

    // Check if newTime is valid. If not, initialize it to the current time
    if (!newTime.isValid()) {
      newTime = dayjs();
    }

    const formattedNewTime = newTime
      .hour(updatedTime.hour())
      .minute(updatedTime.minute());

    updatedStops[index] = {
      ...updatedStops[index],
      [timeKey]: formattedNewTime,
    };
    setStops(updatedStops);
  };

  // Validate that the stop time is within the production time
  const validateTimeInput = () => {
    const productionTimeStartHour = productionTimeStart.hour();
    const productionTimeStartMinute = productionTimeStart.minute();
    const productionTimeEndHour = productionTimeEnd.hour();
    const productionTimeEndMinute = productionTimeEnd.minute();

    const productionTimeStartInMinutes = productionTimeStartHour * 60 + productionTimeStartMinute;
    const productionTimeEndInMinutes = productionTimeEndHour * 60 + productionTimeEndMinute;

    const stopsValidated = stops.map((stop) => {
      const stopStartHour = stop.startTime.hour();
      const stopStartMinute = stop.startTime.minute();
      const stopEndHour = stop.endTime.hour();
      const stopEndMinute = stop.endTime.minute();

      const stopStartInMinutes = stopStartHour * 60 + stopStartMinute;
      const stopEndInMinutes = stopEndHour * 60 + stopEndMinute;

