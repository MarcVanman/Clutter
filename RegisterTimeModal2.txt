
      if (stopStartInMinutes < productionTimeStartInMinutes || stopEndInMinutes > productionTimeEndInMinutes) {
        return false;
      } else {
        return true;
      }
    });

    const isTimeValid = stopsValidated.every((stop) => stop === true);
    return isTimeValid;
  };

  //Set the production time start and end to 15:00 and 23:00 if shift is Aftenhold
  useEffect(() => {
    if (shift === 'Aftenhold') {
      setProductionTimeStart(dayjs(getCopenhagenDate(new Date().setHours(15, 0, 0, 0))));
      setProductionTimeEnd(dayjs(getCopenhagenDate(new Date().setHours(23, 0, 0, 0))));
    }
    else if (shift === 'Daghold') {
      setProductionTimeStart(dayjs(getCopenhagenDate(new Date().setHours(6, 45, 0, 0))));
      setProductionTimeEnd(dayjs(getCopenhagenDate(new Date().setHours(15, 0, 0, 0))));
    }
  }, [shift]);


  const handleSubmit = async (e) => {
    e.preventDefault();
    const registration_id = uuidv4();
    scrollToTop();
    if (validateTimeInput()) {
      setIsPOrderChosen(false);
      setIsShiftChosen(false);
      // Gather data for the OEE-Daily-Numbers table

      const dailyNumbersData = {
        id: registration_id,
        P_Order: selectedPOrder,
        Varenummer: filteredPOrders.filter((pOrder) => pOrder.P_Order === selectedPOrder)[0].Varenummer,
        Machine: selectedMachine.id,
        Produced_parts: produced,
        Discarded_parts: discarded,
        Shift: shift,
        Date: dateSelected.format('DD-MM-YYYY'),
        Production_Start_time: productionTimeStart.format('HH:mm'),
        Production_End_time: productionTimeEnd.format('HH:mm'),
        CreationDate: dayjs(new Date()).format('DD-MM-YYYY HH:mm:ss'),
        table: "OEE-Daily-Numbers",
      };

      // Post data to the OEE-Daily-Numbers table
      try {
        const dailyNumbersResponse = await postItem(dailyNumbersData);
        console.log("Daily Numbers Response:", dailyNumbersResponse);
      } catch (error) {
        console.error("Error posting daily numbers:", error);
      }

      // Iterate through the list of stops and gather data for the OEE-Stop-Registrations table
      for (const stop of stops) {
        const id = uuidv4();
        console.log('stop times', stop.startTime.format('HH:mm'), stop.endTime.format('HH:mm'))
        const stopRegistrationData = {
          id: id,
          Registration_id: registration_id,
          P_Order: selectedPOrder,
          Varenummer: filteredPOrders.filter((pOrder) => pOrder.P_Order === selectedPOrder)[0].Varenummer,
          Machine: selectedMachine.id,
          Shift: shift,
          Date: dateSelected.format('DD-MM-YYYY'),
          Start_time: stop.startTime.format('HH:mm'),
          End_time: stop.endTime.format('HH:mm'),
          Reason: stop.stopReason,
          CreationDate: dayjs(new Date()).format('DD-MM-YYYY HH:mm:ss'),
          table: "OEE-Stop-Registrations",
        };

        // Post data to the OEE-Stop-Registrations table

        try {
          const stopRegistrationResponse = await postItem(stopRegistrationData);
          console.log("Stop Registration Response:", stopRegistrationResponse);
        } catch (error) {
          console.error("Error posting stop registration:", error);
        }

      }

      // Reset the form fields and close the modal
      setShowSuccessModal(true);

    } else {
      setShowErrorModal(true);
    }
  };

  const filterByMachine = (pOrders, selectedMachine) => {
    return pOrders.filter((pOrder) => pOrder.Machine === selectedMachine.id);
  };
  const filteredPOrders = filterByMachine(pOrders, selectedMachine);

  let discardedInputComponent = (
    <div className="input-wrapper">
      <TextInput
        className="text-input-field-register-time input-limited-width"
        required
        placeholder="Antal"
        value={discarded}
        onChange={handleDiscardedChange}
        onBlur={() => validateNumberInput(discarded, setIsDiscardedValid, setHasDiscardedInteracted)}
        error={!isDiscardedValid && hasDiscardedInteracted}
        errorMessage={
          isDiscardedValid === false ? "Skal være et tal mellem 1-10.000" : ""
        }
      />
      {isDiscardedValid && hasDiscardedInteracted && (
        <i className="fa fa-check text-success checkmark"></i>
      )}
    </div>
  )

  let producedInputComponent = (
    <div className="input-wrapper ">
      <TextInput
        className="text-input-field-register-time input-limited-width"
        required
        placeholder="Antal"
        value={produced}
        onChange={handleProducedChange}
        onBlur={() => validateNumberInput(produced, setIsProducedValid, setHasProducedInteracted)}
        error={!isProducedValid && hasProducedInteracted}
        errorMessage={
          isProducedValid === false ? "Skal være et tal mellem 1-10.000" : ""
        }
      />
      {isProducedValid && hasProducedInteracted && (
        <i className="fa fa-check text-success checkmark"></i>
      )}
    </div>
  )

  let productionTimeComponent = (
    <div className='register-time-form-container'>
      <Stack direction="row" spacing={2}>
        <div className='register-time-form-inner-container' style={{ 'textAlign': 'center' }}>
          <Text className='input-field-header'>Produktions tid</Text>
          <div className='time-container'>
            <div className='start-time'>
              <TimeField
                className='time-inputbox'
                label="Start tid for produktion"
                value={productionTimeStart}
                onChange={(value) => handleProductionTimeChange(value, 'productionTimeStart')}
              />
            </div>
            -
            <div className='end-time'>
              <TimeField
                className='time-inputbox'
                label="Slut tid for produktion"
                value={productionTimeEnd}
                onChange={(value) => handleProductionTimeChange(value, 'productionTimeEnd')}
              />
            </div>
          </div>
        </div>
      </Stack>
    </div>
  )

  const allStopsHaveReason = () => stops.every(stop => stop.stopReason !== '');

  const renderStops = () => {
    return stops.map((stop, index) => (
      <div key={stop.id} className="custom-grid-dynamic">
        <Text className='stop-registration'>
          Stop {index + 1}
        </Text>
        <LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale={'da'}>
          <Col numColSpanLg={3}>
            <Card>
              <div className="register-time-form-container" style={{ 'textAlign': 'center' }}>
                <div className='register-time-form-inner-container'>
                  <Text className='input-field-header'>Stop årsag</Text>
                  <SelectBox
                    value={stop.stopReason}
                    onValueChange={(value) => {
                      const updatedStops = [...stops];
                      updatedStops[index] = {
                        ...updatedStops[index],
                        stopReason: value,
                      };
                      setStops(updatedStops);
                    }}
                  >
                    <SelectBoxItem value="Omstilling " text={"Omstilling"} />
                    <SelectBoxItem value="Manglende mandskab" text={"Manglende mandskab"} />
                    <SelectBoxItem value="Planlagt stop" text={"Planlagt stop"} />
                    <SelectBoxItem value="Opstart" text={"Opstart"} />
                    <SelectBoxItem value="Nedlukning" text={"Nedlukning"} />
                    <SelectBoxItem value="Andet" text={"Andet"} />
                    <SelectBoxItem value="Form" text={"Form"} />
                    <SelectBoxItem value="Stanseværktøj" text={"Stanseværktøj"} />
                    <SelectBoxItem value="Robot" text={"Robot"} />
                    <SelectBoxItem value="Maskine" text={"Maskine"} />
                    <SelectBoxItem value="Hjælpeværktøj" text={"Hjælpeværktøj"} />
                    <SelectBoxItem value="Køletunnel" text={"Køletunnel"} />
                    <SelectBoxItem value="Proces" text={"Proces"} />
                    <SelectBoxItem value="Procesafprøvning PRO" text={"Procesafprøvning PRO"} />
                    <SelectBoxItem value="Procesafprøvning PTA" text={"Procesafprøvning PTA"} />
                    <SelectBoxItem value="Fejl 40" text={"Fejl 40 ( menneskelige fejl)"} />
                    <SelectBoxItem value="Smøring" text={"Smøring"} />
                    <SelectBoxItem value="Form ikke klar" text={"Form ikke klar"} />
                    <SelectBoxItem value="Manglende emner" text={"Manglende emner"} />
                    <SelectBoxItem value="Manglende teknisk assistance" text={"Manglende teknisk assistance"} />
                  </SelectBox>
                </div>
              </div>
              <div className='register-time-form-container'>
                <Col numColSpanLg={2}>
                  <Stack direction="row" spacing={2}>
                    <div className='register-time-form-inner-container' style={{ 'textAlign': 'center' }}>
                      <Text className='input-field-header'>Tid</Text>
                      <div className='time-container'>
                        <div className='start-time'>
                          <TimeField
                            className='time-inputbox'
                            label="Start tid for stop"
                            value={stops[index]?.startTime}
                            onChange={(value) => handleStopTimeChange(value, index, 'startTime')}
                            onBlur={() => handleTimeBlur(index, 'startTime')}
                          />
                        </div>
                        -
                        <div className='end-time'>
                          <TimeField
                            className='time-inputbox'
                            label="Slut tid for stop"
                            value={stops[index]?.endTime}
                            onChange={(value) => handleStopTimeChange(value, index, 'endTime')}
                            onBlur={() => handleTimeBlur(index, 'endTime')}
                          />
                        </div>
                      </div>
                    </div>
                  </Stack>
                </Col>
              </div>
            </Card>
          </Col>
        </LocalizationProvider>
      </div>
    ));
  };
